


4 8-bit general registers + 8-bit PC + 8-bit IR
256 bytes memory

0000 0000
iiii aabb


0	0000 aa-- vvvvvvvv 	ld $v, ra	r[a] <- v = mem[pc+1]
1	0001 aabb 		ld (ra), rb	r[a] <- mem[r[b]]
2	0010 aabb		st ra, (rb)	mem[r[b]] <- r[a]
3	0011 aa--		j (ra)		pc <- mem[r[a]]

4	0100 vv--		br $v		pc <- pc + v * 4
5	0101 vvaa		bgt $v, ra	pc <- pc + v * 4 iff r[a] > 0
6	0110 vvbb		beq $v, ra	pc <- pc + 4 * 4 iff r[a] != 0
7	0111 ----		halt		

8	1000 aabb		mv ra, rb	r[b] <- r[a]
9	1001 aabb		add ra, rb	r[b] <- r[b] + r[a]
a	1010 aabb		and ra, rb	r[b] <- r[b] & r[a]
b	1011 aad-		
	     aa0-		inc ra		r[a] <- r[a] + 1
	     aa1-		dec ra		r[a] <- r[a] - 1

c	1100 aadb
	1100 aa00		shl ra, $1	r[a] <- r[a] << 1
	1100 aa01		shl ra, $2	r[a] <- r[a] << 2
	1100 aa10		shr ra, $1	r[a] <- r[a] >> 1
	1100 aa11		shr ra, $2	r[a] <- r[a] >> 2
d	1101 aa--		not ra		r[a] <- ~r[a]
e	1110 aaoo		gpc ra, $o	r[a] <- pc + 4 * o
f	1111 ----		nop



1. mem <- pc
2. ir <- mem, pc <- pc + 1
3. if ir starts with 00
      do stuff with mem
   else
      skip
4. if ir starts with 0
      set regs with 
   else
      set regs with alu output



